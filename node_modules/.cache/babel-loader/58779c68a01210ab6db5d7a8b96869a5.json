{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mmr.deguchi\\\\Desktop\\\\\\u30C1\\u30E5\\u30FC\\u30C8\\u30EA\\u30A2\\u30EB\\\\react\\\\test_app\\\\src\\\\components\\\\presentational\\\\molecules\\\\Card.js\";\nimport React, { Component } from 'react';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport TitleLabel from '../atoms/TitleLabel';\nimport ContentLabel from '../atoms/ContentLabel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dragSource = DragSource(\"item\", {\n  beginDrag(props) {\n    return {\n      id: props.id,\n      title: props.title,\n      content: props.content,\n      originalIndex: props.findItem(props.id)\n    };\n  },\n\n  endDrag(props, monitor) {\n    const {\n      id,\n      originalIndex\n    } = monitor.getItem();\n    const didDrop = monitor.didDrop();\n\n    if (!didDrop) {\n      props.onDrop(id, originalIndex);\n    }\n  }\n\n}, (connect, monitor) => {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  };\n});\nconst dropTarget = DropTarget(\"item\", {\n  canDrop() {\n    return false;\n  },\n\n  hover(props, monitor) {\n    const draggedId = monitor.getItem().id;\n    const overId = props.id;\n\n    if (draggedId !== overId) {\n      const overIndex = props.findItem(overId);\n      props.onDrop(draggedId, overIndex);\n    }\n  }\n\n}, connect => {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n});\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  getItemStyles() {\n    const {\n      isDragging\n    } = this.props;\n    return {\n      opacity: isDragging ? 0.6 : 1\n    };\n  }\n\n  render() {\n    return this.props.connectDragSource(this.props.connectDropTarget( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(TitleLabel, {\n          title: this.props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ContentLabel, {\n          content: this.props.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this)));\n  }\n\n}\n\nexport default _c2 = dragSource(_c = dropTarget(Card));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$dragSource\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/mmr.deguchi/Desktop/チュートリアル/react/test_app/src/components/presentational/molecules/Card.js"],"names":["React","Component","DragSource","DropTarget","TitleLabel","ContentLabel","dragSource","beginDrag","props","id","title","content","originalIndex","findItem","endDrag","monitor","getItem","didDrop","onDrop","connect","connectDragSource","connectDragPreview","dragPreview","isDragging","dropTarget","canDrop","hover","draggedId","overId","overIndex","connectDropTarget","Card","constructor","getItemStyles","opacity","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { DragSource, DropTarget } from 'react-dnd';\r\nimport TitleLabel from '../atoms/TitleLabel';\r\nimport ContentLabel from '../atoms/ContentLabel';\r\n\r\nconst dragSource = DragSource(\r\n  \"item\", \r\n  {\r\n    beginDrag(props) {\r\n      return {\r\n        id: props.id,\r\n        title: props.title,\r\n        content: props.content,\r\n        originalIndex: props.findItem(props.id)\r\n      };\r\n    },\r\n    endDrag(props, monitor) {\r\n      const { id, originalIndex } = monitor.getItem()\r\n      const didDrop = monitor.didDrop()\r\n      if (!didDrop) {\r\n        props.onDrop(id, originalIndex)\r\n      }\r\n    }\r\n  },\r\n  (connect, monitor) => {\r\n    return {\r\n      connectDragSource: connect.dragSource(),\r\n      connectDragPreview: connect.dragPreview(),\r\n      isDragging: monitor.isDragging()\r\n    };\r\n  }\r\n)\r\n\r\nconst dropTarget = DropTarget(\r\n  \"item\",\r\n  {\r\n    canDrop() {\r\n      return false\r\n    },\r\n    hover(props, monitor) {\r\n      const draggedId = monitor.getItem().id\r\n      const overId = props.id\r\n      if (draggedId !== overId) {\r\n        const overIndex = props.findItem(overId)\r\n        props.onDrop(draggedId, overIndex)\r\n      }\r\n    }\r\n  },\r\n  connect => {\r\n    return {\r\n      connectDropTarget: connect.dropTarget()\r\n    };\r\n  }\r\n)\r\n\r\nclass Card extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  getItemStyles() {\r\n    const { isDragging } = this.props\r\n    return {\r\n      opacity: isDragging ? 0.6 : 1,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.props.connectDragSource(\r\n        this.props.connectDropTarget(\r\n          <div className=\"card\">\r\n            <div className=\"card-content\">\r\n              <TitleLabel title={this.props.title} />\r\n              <ContentLabel content={this.props.content} />\r\n            </div>\r\n          </div>\r\n        )\r\n      )\r\n    )\r\n  }\r\n}\r\n\r\nexport default dragSource(dropTarget(Card));"]},"metadata":{},"sourceType":"module"}