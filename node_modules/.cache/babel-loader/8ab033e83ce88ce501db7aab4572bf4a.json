{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mmr.deguchi\\\\Desktop\\\\\\u30C1\\u30E5\\u30FC\\u30C8\\u30EA\\u30A2\\u30EB\\\\react\\\\test_app\\\\src\\\\components\\\\container\\\\organisms\\\\ContentContainer.js\";\nimport React, { Component } from 'react';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport BordContainer from './BordContainer';\nimport CardCreateContainer from './CardCreateContainer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet _columnId = 0;\nlet _cardId = 0;\nconst initialCards = Array.from({\n  length: 9\n}).map(() => ({\n  id: ++_cardId,\n  title: `Card ${_cardId}`\n}));\nconst initialColumns = ['TODO', 'Doing', 'Done'].map((title, i) => ({\n  id: _columnId++,\n  title,\n  cardIds: initialCards.slice(i * 3, i * 3 + 3).map(card => card.id)\n}));\n\nclass ContentContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addColumn = _title => {\n      const title = _title.trim();\n\n      if (!title) return;\n      const newColumn = {\n        id: ++_columnId,\n        title,\n        cardIds: []\n      };\n      this.setState(state => ({\n        columns: [...state.columns, newColumn]\n      }));\n    };\n\n    this.addCard = (columnId, _title) => {\n      const title = _title.trim();\n\n      if (!title) return;\n      const newCard = {\n        id: ++_cardId,\n        title\n      };\n      this.setState(state => ({\n        cards: [...state.cards, newCard],\n        columns: state.columns.map(column => column.id === columnId ? { ...column,\n          cardIds: [...column.cardIds, newCard.id]\n        } : column)\n      }));\n    };\n\n    this.moveCard = (cardId, destColumnId, index) => {\n      this.setState(state => ({\n        columns: state.columns.map(column => ({ ...column,\n          cardIds: _.flowRight( // 2) If this is the destination column, insert the cardId.\n          ids => column.id === destColumnId ? [...ids.slice(0, index), cardId, ...ids.slice(index)] : ids, // 1) Remove the cardId for all columns\n          ids => ids.filter(id => id !== cardId))(column.cardIds)\n        }))\n      }));\n    };\n\n    this.state = {\n      cards: initialCards,\n      columns: initialColumns\n    };\n  }\n\n  render() {\n    const style = {\n      display: \"flex\",\n      width: \"100%\",\n      height: \"883px\",\n      background: \"lightblue\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contentContainer\",\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(CardCreateContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BordContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DragDropContext(HTML5Backend)(ContentContainer);","map":{"version":3,"sources":["C:/Users/mmr.deguchi/Desktop/チュートリアル/react/test_app/src/components/container/organisms/ContentContainer.js"],"names":["React","Component","DragDropContext","HTML5Backend","BordContainer","CardCreateContainer","_columnId","_cardId","initialCards","Array","from","length","map","id","title","initialColumns","i","cardIds","slice","card","ContentContainer","constructor","props","addColumn","_title","trim","newColumn","setState","state","columns","addCard","columnId","newCard","cards","column","moveCard","cardId","destColumnId","index","_","flowRight","ids","filter","render","style","display","width","height","background"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,eAAR,QAA8B,WAA9B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAEA,IAAIC,SAAS,GAAG,CAAhB;AACA,IAAIC,OAAO,GAAG,CAAd;AAEA,MAAMC,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAW;AAACC,EAAAA,MAAM,EAAE;AAAT,CAAX,EAAwBC,GAAxB,CAA4B,OAAO;AACtDC,EAAAA,EAAE,EAAE,EAAEN,OADgD;AAEtDO,EAAAA,KAAK,EAAG,QAAOP,OAAQ;AAF+B,CAAP,CAA5B,CAArB;AAKA,MAAMQ,cAAc,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0BH,GAA1B,CAA8B,CAACE,KAAD,EAAQE,CAAR,MAAe;AAClEH,EAAAA,EAAE,EAAEP,SAAS,EADqD;AAElEQ,EAAAA,KAFkE;AAGlEG,EAAAA,OAAO,EAAET,YAAY,CAACU,KAAb,CAAmBF,CAAC,GAAG,CAAvB,EAA0BA,CAAC,GAAG,CAAJ,GAAQ,CAAlC,EAAqCJ,GAArC,CAAyCO,IAAI,IAAIA,IAAI,CAACN,EAAtD;AAHyD,CAAf,CAA9B,CAAvB;;AAMA,MAAMO,gBAAN,SAA+BnB,SAA/B,CAAyC;AAEvCoB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBC,SARmB,GAQPC,MAAM,IAAI;AACpB,YAAMV,KAAK,GAAGU,MAAM,CAACC,IAAP,EAAd;;AACA,UAAI,CAACX,KAAL,EAAY;AAEZ,YAAMY,SAAS,GAAG;AAChBb,QAAAA,EAAE,EAAE,EAAEP,SADU;AAEhBQ,QAAAA,KAFgB;AAGhBG,QAAAA,OAAO,EAAE;AAHO,OAAlB;AAKA,WAAKU,QAAL,CAAcC,KAAK,KAAK;AACtBC,QAAAA,OAAO,EAAE,CAAC,GAAGD,KAAK,CAACC,OAAV,EAAmBH,SAAnB;AADa,OAAL,CAAnB;AAGD,KApBkB;;AAAA,SAsBnBI,OAtBmB,GAsBT,CAACC,QAAD,EAAWP,MAAX,KAAsB;AAC9B,YAAMV,KAAK,GAAGU,MAAM,CAACC,IAAP,EAAd;;AACA,UAAI,CAACX,KAAL,EAAY;AAEZ,YAAMkB,OAAO,GAAG;AAACnB,QAAAA,EAAE,EAAE,EAAEN,OAAP;AAAgBO,QAAAA;AAAhB,OAAhB;AACA,WAAKa,QAAL,CAAcC,KAAK,KAAK;AACtBK,QAAAA,KAAK,EAAE,CAAC,GAAGL,KAAK,CAACK,KAAV,EAAiBD,OAAjB,CADe;AAEtBH,QAAAA,OAAO,EAAED,KAAK,CAACC,OAAN,CAAcjB,GAAd,CACPsB,MAAM,IACJA,MAAM,CAACrB,EAAP,KAAckB,QAAd,GACI,EAAC,GAAGG,MAAJ;AAAYjB,UAAAA,OAAO,EAAE,CAAC,GAAGiB,MAAM,CAACjB,OAAX,EAAoBe,OAAO,CAACnB,EAA5B;AAArB,SADJ,GAEIqB,MAJC;AAFa,OAAL,CAAnB;AASD,KApCkB;;AAAA,SAsCnBC,QAtCmB,GAsCR,CAACC,MAAD,EAASC,YAAT,EAAuBC,KAAvB,KAAiC;AAC1C,WAAKX,QAAL,CAAcC,KAAK,KAAK;AACtBC,QAAAA,OAAO,EAAED,KAAK,CAACC,OAAN,CAAcjB,GAAd,CAAkBsB,MAAM,KAAK,EACpC,GAAGA,MADiC;AAEpCjB,UAAAA,OAAO,EAAEsB,CAAC,CAACC,SAAF,EACP;AACAC,UAAAA,GAAG,IACDP,MAAM,CAACrB,EAAP,KAAcwB,YAAd,GACI,CAAC,GAAGI,GAAG,CAACvB,KAAJ,CAAU,CAAV,EAAaoB,KAAb,CAAJ,EAAyBF,MAAzB,EAAiC,GAAGK,GAAG,CAACvB,KAAJ,CAAUoB,KAAV,CAApC,CADJ,GAEIG,GALC,EAMP;AACAA,UAAAA,GAAG,IAAIA,GAAG,CAACC,MAAJ,CAAW7B,EAAE,IAAIA,EAAE,KAAKuB,MAAxB,CAPA,EAQPF,MAAM,CAACjB,OARA;AAF2B,SAAL,CAAxB;AADa,OAAL,CAAnB;AAcD,KArDkB;;AAEjB,SAAKW,KAAL,GAAa;AACXK,MAAAA,KAAK,EAAEzB,YADI;AAEXqB,MAAAA,OAAO,EAAEd;AAFE,KAAb;AAID;;AAiDD4B,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG;AACZC,MAAAA,OAAO,EAAE,MADG;AAEZC,MAAAA,KAAK,EAAE,MAFK;AAGZC,MAAAA,MAAM,EAAE,OAHI;AAIZC,MAAAA,UAAU,EAAE;AAJA,KAAd;AAMA,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAkC,MAAA,KAAK,EAAEJ,KAAzC;AAAA,8BACE,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAtEsC;;AAyEzC,eAAe1C,eAAe,CAACC,YAAD,CAAf,CAA8BiB,gBAA9B,CAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport {DragDropContext} from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport BordContainer from './BordContainer';\r\nimport CardCreateContainer from './CardCreateContainer';\r\n\r\nlet _columnId = 0;\r\nlet _cardId = 0;\r\n\r\nconst initialCards = Array.from({length: 9}).map(() => ({\r\n  id: ++_cardId,\r\n  title: `Card ${_cardId}`,\r\n}));\r\n\r\nconst initialColumns = ['TODO', 'Doing', 'Done'].map((title, i) => ({\r\n  id: _columnId++,\r\n  title,\r\n  cardIds: initialCards.slice(i * 3, i * 3 + 3).map(card => card.id),\r\n}));\r\n\r\nclass ContentContainer extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: initialCards,\r\n      columns: initialColumns,\r\n    }\r\n  }\r\n\r\n  addColumn = _title => {\r\n    const title = _title.trim();\r\n    if (!title) return;\r\n\r\n    const newColumn = {\r\n      id: ++_columnId,\r\n      title,\r\n      cardIds: [],\r\n    };\r\n    this.setState(state => ({\r\n      columns: [...state.columns, newColumn],\r\n    }));\r\n  };\r\n\r\n  addCard = (columnId, _title) => {\r\n    const title = _title.trim();\r\n    if (!title) return;\r\n\r\n    const newCard = {id: ++_cardId, title};\r\n    this.setState(state => ({\r\n      cards: [...state.cards, newCard],\r\n      columns: state.columns.map(\r\n        column =>\r\n          column.id === columnId\r\n            ? {...column, cardIds: [...column.cardIds, newCard.id]}\r\n            : column\r\n      ),\r\n    }));\r\n  };\r\n\r\n  moveCard = (cardId, destColumnId, index) => {\r\n    this.setState(state => ({\r\n      columns: state.columns.map(column => ({\r\n        ...column,\r\n        cardIds: _.flowRight(\r\n          // 2) If this is the destination column, insert the cardId.\r\n          ids =>\r\n            column.id === destColumnId\r\n              ? [...ids.slice(0, index), cardId, ...ids.slice(index)]\r\n              : ids,\r\n          // 1) Remove the cardId for all columns\r\n          ids => ids.filter(id => id !== cardId)\r\n        )(column.cardIds),\r\n      })),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const style = {\r\n      display: \"flex\",\r\n      width: \"100%\",\r\n      height: \"883px\",\r\n      background: \"lightblue\"\r\n    }\r\n    return (\r\n      <div className=\"contentContainer\" style={style}>\r\n        <CardCreateContainer />\r\n        <BordContainer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DragDropContext(HTML5Backend)(ContentContainer);\r\n"]},"metadata":{},"sourceType":"module"}